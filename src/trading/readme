假设交易的2个用户A和B不在同一台机器上，且互相知道对方的ID, 这种情况下可能出现幂等性的问题

思路如下:
[1]A向B借款，A做完前置检查(钱是否够)先扣款等待返回,可能会出现如下两种情况 （所有交易都有唯一流水号）
	(1).请求正常返回，A更新流水号对应的状态，交易完成
	(2).请求失败的情况(超时或是网络错误,不确定B是否收到改请求)下A和B的状态，
	   A: 锁定(不能做任何金钱变更的操作)，后台服务定时重试该流水号的操作，直到成功(或者重试一定次数还不成功的话，由客服介入)修改流水状态，然后解锁
	   B: 可能有2种情况
			B1: 刚开始没有收到A的请求，收到了A后台服务的重试请求，正常处理然后存储该流水号和对应的操作
			B2: 刚开始收到了A的请求，但是发还给A的应答因为网络故障丢失了，这时检测流水号是否被处理，如果是处理过的流水号直接返回即可(不会重复添加)
[2]A向B还款，A做前置检测(B是否给我借款,查询记录即可)和是否被锁定的检测，之后的流程就和借款一样了
[3]剩下的几个需求，直接本地都可以获取到

主要代码在 trading_user:handle_AddLoan 和 trading_user:handle_AddBorrow中
还款比借款稍微麻烦一些，还款的接收方需要检测是否像还款者借过钱
用户的钱是由初始化金额+借入-借出+还入-还出
  
  
接口，所有请求和返回数据都为json 
1:	http://121.41.107.94:8889/createUser
    功能:创建新角色
    请求参数: {"init_money": 1000}
    返回:
        成功: {"data":{"user_id":10001}, "state":1}
        失败: {"state":0,"error":"XXXXXXX"}
2: 	http://121.41.107.94:8889/createBorrow
    功能:创建借款
    请求参数: {"source_id": 10001,"dest_id": 10000,"money": 1500}
    返回:
        成功: {"state": 1}
        失败: {"error":"XXXXXX","state":0}
3:  http://121.41.107.94:8889/createRepay
    功能:创建还款
    请求参数: {"source_id": 10001,"dest_id": 10000,"money": 1500}
    返回:
        成功: {"state": 1}
        失败: {"error":"XXXXXX","state":0}
4:  http://121.41.107.94:8889/getUserInfo
    功能: 获取所有的交易信息
    请求参数: {"user_id": 10001}
    返回:
        成功:
            {
                "data":
                {
                    "current_money":2000,           //当前剩余的钱
                    "total_borrow":1000,            //所有借入的钱
                    "total_loan":0                  //所有借出的钱
                },
                "state":1
            }
        失败:{"error":"XXXXXX","state":0}
5:  http://192.168.1.181:8889/viewUserRelation
    功能: 查看指定用户之前的交易关系
    请求参数: {"source_id": 10000, "dest_id": 10001}
    返回:
        成功:
            {
                "data":{
                    "borrow_value":0,               //source_id向dest_id借入的钱
                    "loan_value":1000               //source_id给dest_id借出的钱
                },
                "state":0
            }
        失败:
            {"error":"XXXXXX","state":0}
